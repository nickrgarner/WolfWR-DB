import java.sql.*;
import java.sql.Date;
import java.text.ParseException;
import java.sql.SQLException;

public class MerchandiseSQL {

    //This connects to the database by calling the login file 
    static Connection connection = Login.connection;
    static Statement statement = Login.statement;
    static ResultSet result = Login.result;

    /**
     * Method is called in Merchandise file where user wants to see all the Merchandise in the database. This method
     * will perform the sql statement and generate a result set of all the Merchandise in the database.
     * @return ResultSet
     * @throws ClassNotFoundException
     * @throws SQLException
     * @throws ParseException
     */
    public static ResultSet viewAllMerchandise() throws ClassNotFoundException, SQLException, ParseException{
        //A table of data representing a database result set, which is usually generated by executing a 
        //statement that queries the database.
        ResultSet returnSet = null;
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;

        try {
            ps = connection.prepareStatement("SELECT * FROM Merchandise;");
            returnSet = ps.executeQuery();
            ps.close();
        } catch (SQLException e) {
            System.out.println("SQL Exception");
            System.out.println(e.getStackTrace());
            return null;
        }
        return returnSet;
    }
    
    /**
     * Method is called in the Merchandise file and is used to find a specific merchandise.  
     * @param productID
     * @return ResultSet
     * @throws ClassNotFoundException
     * @throws SQLException
     * @throws ParseException
     */
    public static ResultSet viewMerchandise(int productID) throws ClassNotFoundException, SQLException, ParseException{
        //A table of data representing a database result set, which is usually generated by executing a 
        //statement that queries the database.
        ResultSet returnSet = null;
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;

        try {
            ps = connection.prepareStatement("SELECT * FROM Merchandise WHERE productID = ?;");
            ps.setInt(1, productID);
            returnSet = ps.executeQuery();
            ps.close();
        } catch (SQLException e) {
            System.out.println("SQL Exception");
            System.out.println(e.getStackTrace());
            return null;
        }
        return returnSet;
    }

    /**
     * Method is called from Merchandise file and is called after the user has finished filling all the attributes for a Merchandise
     * @param productID
     * @param storeID
     * @param name
     * @param quantity
     * @param buyPrice
     * @param marketPrice
     * @param productionDate
     * @param expiration
     * @param supplierID
     * @throws SQLException
     * @throws ParseException
     */
    static void addMerchandise(int productID, int storeID, String name, int quantity, double buyPrice, double marketPrice, Date productionDate, Date expiration, int supplierID) throws SQLException, ParseException{
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;
        int id = 0;
        try{
            ps = connection.prepareStatement("INSERT INTO Merchandise (productID, storeID, name, quantity, buyPrice, marketPrice, productionDate, expiration, supplierID) VALUES (?,?,?,?,?,?,?,?,?);");
            ps.setInt(1,productID);
            ps.setInt(2,storeID);
            ps.setString(3,name);
            ps.setInt(4,quantity);
            ps.setDouble(5, buyPrice);
            ps.setDouble(6,marketPrice);
            ps.setDate(7,productionDate);
            ps.setDate(8, expiration);
            ps.setInt(9, supplierID);
            
            id = ps.executeUpdate();
            connection.commit();
            ps.close();
            System.out.println(id);
            
            if(id > 0){
                System.out.println("Merchandise added successfully");
            } else{
                System.out.println("Merchandise not added");
            }
        }
        catch (SQLException e) {
            System.out.println("SQL Exception");
            connection.rollback();
            System.out.println(e.getStackTrace());
        }
    }
    /**
     * Method is called from Merchandise file and is called after the user has finished filling all the attributes that they want to edit 
     * for a Merchandise     
     * @param productID
     * @param storeID
     * @param name
     * @param quantity
     * @param buyPrice
     * @param marketPrice
     * @param productionDate
     * @param expiration
     * @param supplierID
     * @throws SQLException
     * @throws ParseException
     */
    static void editMerchandise(int productID, int storeID, String name, int quantity, double buyPrice, double marketPrice, Date productionDate, Date expiration, int supplierID) throws SQLException, ParseException{
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;
        int id = 0;
        try{
            ps = connection.prepareStatement("UPDATE Merchandise SET storeID = ?, name = ?, quantity = ?, buyPrice = ?, marketPrice = ?, productionDate = ?, expiration = ?, supplierID = ? WHERE productID = ?;");
            
            ps.setInt(1,storeID);
            ps.setString(2,name);
            ps.setInt(3,quantity);
            ps.setDouble(4, buyPrice);
            ps.setDouble(5,marketPrice);
            ps.setDate(6,productionDate);
            ps.setDate(7, expiration);
            ps.setInt(8, supplierID);
            ps.setInt(9,productID);

            id = ps.executeUpdate();
            connection.commit();
            ps.close();
            System.out.println(id);

            
            if(id > 0){
                System.out.println("Merchandise updated successfully");
            } else{
                System.out.println("Merchandise not updated");
            }
        }
        catch (SQLException e) {
            System.out.println("SQL Exception");
            connection.rollback();
            System.out.println(e.getStackTrace());
        }
    }
    /**
     * Method is called from Merchandise file and is called to delete a merchandise from the database
     * @param productID
     */
    static void deleteMerchandise(int productID){
        try {
            PreparedStatement ps = connection.prepareStatement("DELETE FROM Merchandise WHERE productID = ?;");
            ps.setInt(1, productID);
            int id = ps.executeUpdate();

            System.out.println(id);

            if (id > 0) {
                System.out.println("Merchandise deleted");
            } else {
                System.out.println("Merchandise not deleted");
            }
        } catch (SQLException e) {
            System.out.println("SQL Exception");
            System.out.println(e.getStackTrace());
        }
    }

    static void addNewMerchandise(int productID, int storeID, String name, int quantity, double buyPrice, double marketPrice, Date productionDate, Date expiration, int supplierID) throws SQLException, ParseException{
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;
        int id = 0;
        try{
            ps = connection.prepareStatement("INSERT INTO Merchandise (productID, storeID, name, quantity, buyPrice, marketPrice, productionDate, expiration, supplierID) VALUES (?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE quantity = quantity + 10000;");
            ps.setInt(1,productID);
            ps.setInt(2,storeID);
            ps.setString(3,name);
            ps.setInt(4,quantity);
            ps.setDouble(5, buyPrice);
            ps.setDouble(6,marketPrice);
            ps.setDate(7,productionDate);
            ps.setDate(8, expiration);
            ps.setInt(9, supplierID);
            
            id = ps.executeUpdate();
            connection.commit();
            ps.close();
            System.out.println(id);
            
            if(id > 0){
                System.out.println("New Merchandise added successfully");
            } else{
                System.out.println("New Merchandise not added");
            }
        }
        catch (SQLException e) {
            System.out.println("SQL Exception");
            connection.rollback();
            System.out.println(e.getStackTrace());
        }
    }

    static void updateAmountOwed(int supplierID) throws SQLException, ParseException{
        //Object that represents a precompiled SQL statement
        PreparedStatement ps = null;
        int id = 0;
        try{
            ps = connection.prepareStatement("UPDATE Supplier SET amountOwed = amountOwed + (0.02*10000) where supplierID = ?;");
            ps.setInt(1,supplierID);
            
            id = ps.executeUpdate();
            connection.commit();
            ps.close();
            System.out.println(id);
            
            if(id > 0){
                System.out.println("Amount owed to supplier updated");
            } else{
                System.out.println("Amount owed to supplier could not be updated");
            }
        }
        catch (SQLException e) {
            System.out.println("SQL Exception");
            connection.rollback();
            System.out.println(e.getStackTrace());
        }
    }
}
